{
  "hash": "fa26c5c4e4bc08939d4c94d64954fc44",
  "result": {
    "markdown": "---\ntitle: \"Alphabetically sorting your source code character vectors\"\nsubtitle: \"Neat little tricks, Episode 1\"\ndate: \"2022-08-17\"\ncategories: [neat-tricks]\n---\n\n\n# A productive rabbit hole\n\nFor week 33 of #TidyTuesday 2022 I had to manually select names from a dataset. So, I typed something like\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter(df, name %in% c(\"The Witcher\", \"Hamilton\", \"Westworld\", \"Sense8\"))\n```\n:::\n\n\nDo you see what's wrong with this? No? Congratulations ðŸŽ‰, you have a much healthier, more pragmatic approach to coding than I do.\n\nI, on the other hand, was bothered by the fact that the series names were not in alphabetical order. But, *\"hey\"*, I thought, R is a [\"well-developed, simple and effective programming language\"](https://www.r-project.org/about.html), so why not use it to bring my source code into alphabetical order.\n\n#### Obviously, I could just type my input in alphabetical order, but where is the fun in that?\n\n![](images/drake.jpg){.preview-image fig-align=\"center\" width=\"300\"}\n\n::: {.callout-note appearance=\"simple\"}\nThe context is not really important, so I won't go into detail on what this dataset was about. The trick is super generally and applies to many situations anyways. But you can see my final plot [on Twitter](https://twitter.com/philippkollenda) and the accompanying blog post [on my website](https://www.pkollenda.com/blog.html).\n:::\n\n## How to programatically sort your source code into alphabetical order.\n\nMy goal is to get alphabetically sorted output that I can simply copy + paste into my source file (or write to the file with `write_lines()`).\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"true\"}\nx <- c(\"The Witcher\", \"Hamilton\", \"Westworld\", \"Sense8\")\nprint(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"The Witcher\" \"Hamilton\"    \"Westworld\"   \"Sense8\"     \n```\n:::\n\n```{.r .cell-code  code-line-numbers=\"true\"}\ndput(sort(x))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nc(\"Hamilton\", \"Sense8\", \"The Witcher\", \"Westworld\")\n```\n:::\n:::\n\nSuccess! That last line is something I can copy. ðŸ˜ƒ And...it only took approximately 1000 hours of googling to find `dput()` ðŸ™ˆ Eventually the *Similar questions* that pop-up just before you create a stackoverflow question came to the rescue.\n\nIt would be really cool to immediately copy the output of the dput() statement to the clipboard. There is the [clipr package](https://github.com/mdlincoln/clipr) which looks promising, but that is something for another evening.",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}